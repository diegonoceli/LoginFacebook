import unittest
from unittest.mock import patch, MagicMock
from database_service import DatabaseService, ContratoMae

class TestDatabaseService(unittest.TestCase):

    def test_initialization(self):
        db_service = DatabaseService('localhost', 5432, 'mydb', 'user', 'password')
        self.assertEqual(db_service.host, 'localhost')
        self.assertEqual(db_service.port, 5432)
        self.assertEqual(db_service.database, 'mydb')
        self.assertEqual(db_service.user, 'user')
        self.assertEqual(db_service.password, 'password')
        self.assertEqual(db_service.nome_tabela, 'tbkx6002 ctnt_mae_fran_vare')

    @patch('database_service.pg8000')
    def test_connect_local_environment(self, mock_pg8000):
        db_service = DatabaseService('localhost', 5432, 'mydb', 'user', 'password')
        mock_pg8000.connect.return_value = MagicMock()
        with patch.dict('os.environ', {'ENVIRONMENT': 'LOCAL'}):
            db_service.connect()
            mock_pg8000.connect.assert_called_once_with(
                host='localhost', port=5432, database='mydb', user='user', password='password', ssl_context=None
            )

    @patch('database_service.pg8000')
    def test_connect_other_environment(self, mock_pg8000):
        db_service = DatabaseService('example.com', None, 'mydb', 'user', 'password')
        mock_pg8000.connect.return_value = MagicMock()
        with patch.dict('os.environ', {'ENVIRONMENT': 'PRODUCTION'}):
            db_service.connect()
            mock_pg8000.connect.assert_called_once_with(
                host='example.com', database='mydb', user='user', password='password'
            )

    @patch('database_service.DatabaseService.connect')
    def test_consulta_dados(self, mock_connect):
        db_service = DatabaseService('localhost', 5432, 'mydb', 'user', 'password')
        mock_cursor = MagicMock()
        mock_conn = MagicMock()
        mock_cursor.description = [('num_ctrt_mae_fran_vare',), ('nom_fant_fran_ctrt_mae',), ('nom_situ_ctrt_mae',), ('nom_tipo_serv_ctnt_mae',), ('dat_hor_incu_atnt_mae',)]
        mock_cursor.rowcount = 5
        mock_cursor.fetchall.return_value = [(1, 'Fantasia', 'Ativo', 'Serviço', '2024-03-18 12:00:00')]*5
        mock_conn.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_conn

        result, total_registros = db_service.consulta_dados(1, 10)

        self.assertEqual(total_registros, 5)
        self.assertEqual(len(result), 5)
        self.assertEqual(result[0]['num_ctrt_mae_fran_vare'], 1)
        self.assertEqual(result[0]['nom_fant_fran_ctrt_mae'], 'Fantasia')
        self.assertEqual(result[0]['nom_situ_ctrt_mae'], 'Ativo')
        self.assertEqual(result[0]['nom_tipo_serv_ctnt_mae'], 'Serviço')
        self.assertEqual(result[0]['dat_hor_incu_atnt_mae'], '2024-03-18 12:00:00')

if __name__ == '__main__':
    unittest.main()
