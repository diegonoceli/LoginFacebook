import os
from typing import Dict, Any
from aws_lambda_context import LambdaContext
from database_use_case import DatabaseUseCase
from pagination import Pagination
from aws_lambda.proxy import APIGatewayProxyEvent, APIGatewayProxyResult

def lambda_handler(event: APIGatewayProxyEvent, context: LambdaContext) -> APIGatewayProxyResult:
    page = int(event.path_parameters.get('page', 1))
    page_size = int(event.path_parameters.get('page_size', 10))
    use_case = DatabaseUseCase()  # Supondo que você tenha uma classe DatabaseUseCase
    resposta, total_registros = use_case.executar(page, page_size)
    return _construir_resposta_paginada_sucesso(page, page_size, total_registros, resposta)

def _construir_resposta_paginada_sucesso(page: int, page_size: int, total_registros: int, resposta: Any) -> Dict[str, Any]:
    paginacao = Pagination(page, page_size, total_registros)
    return {
        'statusCode': 200,
        'data': resposta,
        'pagination': {
            'links': paginacao.gerador_links(),  # Corrigi 'Links' para 'links'
            'page': page,
            'totalPages': paginacao.total_paginas,
            'totalRecords': total_registros,
            'pageSize': page_size
        }
    }

# Testes Unitários para a função lambda_handler
class TestLambdaHandler(unittest.TestCase):

    @patch('lambda_function.DatabaseUseCase')
    def test_lambda_handler(self, mock_use_case):
        event = {
            'path_parameters': {
                'page': '1',
                'page_size': '10'
            }
        }
        context = MagicMock()
        mock_use_case_instance = mock_use_case.return_value
        mock_use_case_instance.executar.return_value = ([], 0)

        response = lambda_handler(event, context)

        self.assertEqual(response['statusCode'], 200)
        self.assertEqual(response['pagination']['page'], 1)
        self.assertEqual(response['pagination']['pageSize'], 10)
        self.assertEqual(response['pagination']['totalRecords'], 0)
        self.assertEqual(response['pagination']['totalPages'], 0)
        self.assertEqual(response['data'], [])
